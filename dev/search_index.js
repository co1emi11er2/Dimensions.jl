var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = Dimensions","category":"page"},{"location":"#Dimensions","page":"Home","title":"Dimensions","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for Dimensions.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [Dimensions]","category":"page"},{"location":"#Dimensions.dimensions-Union{Tuple{T}, Tuple{S}, Tuple{Array{Vector{T}, 1}, Array{Vector{S}, 1}}} where {S, T}","page":"Home","title":"Dimensions.dimensions","text":"dimensions(\nxs::Vector{Vector{T}}, \nys::Vector{Vector{S}}; \noffset = zero(S), # offset in y direction\n) where T where S\n\nFinds the dimensions of a horizontally spaced set of objects with points xs and ys.  Each vector in xs and ys represents a new object.\n\n\n\n\n\n","category":"method"},{"location":"#Dimensions.find_middle-Union{Tuple{AbstractArray{T}}, Tuple{T}} where T","page":"Home","title":"Dimensions.find_middle","text":"find_middle(xs::AbstractArray{T}) where T\n\nCompute the middle of an array xs for each column, which consists of finding its extrema and then computing their mean.\n\nExample\n\njulia> a = [\n       1 2 3\n       4 5 6\n       7 8 9\n       ]\n3Ã—3 Matrix{Int64}:\n 1  2  3\n 4  5  6\n 7  8  9\n\njulia> find_middle(a)\n3-element Vector{Int64}:\n 4\n 5\n 6\n\n\n\n\n\n\n","category":"method"},{"location":"#Dimensions.find_middle-Union{Tuple{T}, Tuple{S}, Tuple{AbstractArray{T}, AbstractArray{S}}} where {S, T}","page":"Home","title":"Dimensions.find_middle","text":"find_middle(xs::AbstractArray{T}, ys::AbstractArray{S}) where T where S\n\nCompute the middle of an array xs and ys for each column, which consists of finding its extrema and then computing their mean.  Will return two vectors for each array.\n\n\n\n\n\n","category":"method"},{"location":"#Dimensions.find_midpoints-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"Home","title":"Dimensions.find_midpoints","text":"find_midpoints(xs::AbstractVector{T}) where T\n\nCompute the midpoints of a vector xs, which consists of computing the average between adjacent values in the vector.\n\nExample\n\njulia> a = [10; 20; 30; 40; 50]\n5-element Vector{Int64}:\n 10\n 20\n 30\n 40\n 50\n\njulia> find_midpoints(a)\n4-element Vector{Int64}:\n 15\n 25\n 35\n 45\n\n\n\n\n\n\n","category":"method"},{"location":"#Dimensions.find_spacing-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"Home","title":"Dimensions.find_spacing","text":"find_spacing(xs::AbstractVector{T}) where T\n\nCompute the spacing of a vector xs, which consists of computing the difference between adjacent values in the vector.\n\nExample\n\njulia> a = [1; 3; 7; 20; 30]\n5-element Vector{Int64}:\n  1\n  3\n  7\n 20\n 30\n\njulia> find_spacing(a)\n4-element Vector{Int64}:\n  2\n  4\n 13\n 10\n\n\n\n\n\n\n","category":"method"}]
}
